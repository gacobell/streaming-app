import AgoraRTC, {
  IAgoraRTCClient,
  ICameraVideoTrack,
  IMicrophoneAudioTrack,
  IAgoraRTCRemoteUser,
  UID,
} from "agora-rtc-sdk-ng";

export const AGORA_APP_ID = "1639b96fc1e7482f95b759d92b784326";

// Create Agora client for live streaming
export const createLiveStreamClient = () => {
  return AgoraRTC.createClient({
    mode: "live", // Live streaming mode
    codec: "vp8", // Video codec
  });
};

// Create Agora client for 1:1 video calls
export const createVideoCallClient = () => {
  return AgoraRTC.createClient({
    mode: "rtc", // Real-time communication mode (for 1:1 calls)
    codec: "vp8",
  });
};

// Generate a simple channel name
export const generateChannelName = (
  userName: string,
): string => {
  return `channel_${userName.replace(/\s+/g, "_").toLowerCase()}_${Date.now()}`;
};

// Generate a temporary token (for testing only)
// In production, tokens should be generated by your backend server
export const generateTempToken = async (
  channelName: string,
  uid: number = 0,
): Promise<string | null> => {
  // For development without backend, we return null (works without token for testing)
  // In production, call your backend API that generates tokens using Agora's token server
  // Example: const response = await fetch('/api/agora-token', { method: 'POST', body: JSON.stringify({ channelName, uid }) });
  return null;
};

// Helper to check if browser supports Agora
export const checkSystemRequirements = () => {
  return AgoraRTC.checkSystemRequirements();
};

// Get available cameras
export const getCameras = async () => {
  return await AgoraRTC.getCameras();
};

// Get available microphones
export const getMicrophones = async () => {
  return await AgoraRTC.getMicrophones();
};

export type {
  IAgoraRTCClient,
  ICameraVideoTrack,
  IMicrophoneAudioTrack,
  IAgoraRTCRemoteUser,
  UID,
};